{"version":3,"sources":["components/ContactsForm/StyledComponents.js","components/ContactsForm/ContactsForm.jsx","components/ContactsList/StyledComponents.js","components/ContactsList/ContactsList.jsx","components/Section/StyledComponents.js","components/Section/Section.jsx","components/ContactsFilter/StyledComponents.js","components/ContactsFilter/ContactsFilter.jsx","components/App.js","index.js"],"names":["Form","styled","form","FormLabel","label","Input","input","Button","button","ContactsForm","addContact","useState","name","setNameValue","number","setNumberValue","handleInputChange","event","target","value","onSubmit","e","preventDefault","Number","isNaN","alert","type","placeholder","onChange","TaskList","ul","TaskItem","li","TaskItemElements","p","ContactsList","items","onDeleteContact","map","i","onClick","id","Section","section","Title","h2","SectionBlock","title","children","FilterBlock","div","Label","FilterContacts","OnInputFilter","App","JSON","parse","window","localStorage","getItem","contacts","setContacts","nameFilter","setNameFilter","useEffect","setItem","stringify","visibleContacts","filter","item","toLowerCase","includes","contact","isAdded","uuidv4","inputValue","prevState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c3e522d0.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst Form = styled.form`\n  max-width: 100%;\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n`;\nconst FormLabel = styled.label`\n  width: 85%;\n  margin-bottom: 10px;\n  display: flex;\n  justify-content: space-around;\n  font-weight: 500;\n  color: #ff18cd;\n`;\nconst Input = styled.input`\n  height: 15px;\n  width: 250px;\n`;\n\nconst Button = styled.button`\n  padding: 2px 10px;\n  max-width: 250px;\n  height: 30px;\n  background-color: #fff418;\n  border: none;\n  border-radius: 0.5rem;\n  cursor: pointer;\n  :hover {\n    transform: scale(1.2);\n  }\n`;\n\nexport { Form, FormLabel, Input, Button };\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, FormLabel, Input, Button } from './StyledComponents';\n\n\nexport default function ContactsForm({addContact}) {\n  const [name, setNameValue] = useState('');\n  const [number, setNumberValue] = useState('');\n\n  const handleInputChange = event => {\n    const { name, value } = event.target;\n\n switch (name) {\n      case 'name':\n        setNameValue(value);\n        break;\n      case 'number':\n        setNumberValue(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmitForm = e => {\n    e.preventDefault();\n    if (!name || !number) {\n      alert('You have not entered all the data');\n      return;\n    }\n\n    if (Number.isNaN(+number)) {\n      alert('Phone number must contain only numbers');\n      return;\n    }\n    addContact(name, number);\n   setNameValue('');\n    setNumberValue('');\n  };\n\n    return (\n      <Form onSubmit={handleSubmitForm}>\n        <FormLabel>\n          Name\n          <Input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            placeholder=\"Enter name\"\n            onChange={handleInputChange}\n          />\n        </FormLabel>\n        <FormLabel>\n          Number\n          <Input\n            name=\"number\"\n            type=\"tel\"\n            value={number}\n            placeholder=\"Enter phone number\"\n            onChange={handleInputChange}\n          />\n        </FormLabel>\n        <Button type=\"submit\">Add contact</Button>\n      </Form>\n    );\n  }\n\nContactsForm.propTypes = {\n    addContact: PropTypes.func.isRequired,\n  };\n","import styled from 'styled-components';\n\nconst TaskList = styled.ul`\n  max-width: 700px;\n  margin: 0 auto;\n`;\nconst TaskItem = styled.li`\n  padding: 5px 5px 5px 5px;\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  /* background-color:grey; */\n  background-color: #fff;\n  :not(:nth-child(odd)) {\n    background-color: #cacaca;\n  }\n  border: 1px solid black;\n  border-radius: 0.5rem;\n  margin-bottom: 10px;\n  box-shadow: 10px 5px 5px grey;\n`;\nconst TaskItemElements = styled.p`\n  font-weight: 500;\n  &:not(:last-child) {\n    margin-right: 10px;\n  }\n`;\nconst Button = styled.button`\n  padding: 5px 10px;\n  max-width: 200px;\n  height: 20px;\n  background-color: goldenrod;\n  border: none;\n  border-radius: 0.5rem;\n  font-size: 0.6rem;\n  color: #fff;\n  text-transform: uppercase;\n  cursor: pointer;\n`;\nexport { TaskList, TaskItem, TaskItemElements, Button };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  TaskList,\n  TaskItem,\n  TaskItemElements,\n  Button,\n} from './StyledComponents';\n\nexport default function ContactsList({ items, onDeleteContact }) {\n  return (\n    <TaskList>\n      {items.map(i => (\n        <TaskItem key={i.id}>\n          <TaskItemElements>{i.name} :</TaskItemElements>\n          <TaskItemElements>{i.number}</TaskItemElements>\n          <Button type=\"button\" onClick={() => onDeleteContact(i.id)}>\n            Delete\n          </Button>\n        </TaskItem>\n      ))}\n    </TaskList>\n  );\n}\n\nContactsList.propTypes = {\n  items: PropTypes.array.isRequired,\n  onDeleteContact: PropTypes.func,\n};\n","import styled from 'styled-components';\n\nconst Section = styled.section`\n  padding: 20px 0px 20px;\n  max-width: 600px;\n  margin: 0 auto;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  background-color: #18f0ff;\n`;\nconst Title = styled.h2`\n  width: 100%;\n  text-align: center;\n  font-size: 2rem;\n  color: #1834ff;\n  font-weight: 600;\n  text-transform: uppercase;\n  margin-bottom: 40px;\n`;\n\nexport { Section, Title };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Section, Title } from './StyledComponents';\n\nexport default function SectionBlock({ title, children }) {\n  return (\n    <Section>\n      <Title>{title}</Title>\n      {children}\n    </Section>\n  );\n}\n\nSectionBlock.propTypes = {\n  title: PropTypes.string,\n};\n","import styled from 'styled-components';\n\nconst FilterBlock = styled.div`\n  width: 100%;\n  padding-bottom: 20px;\n  margin-top: 10px;\n`;\nconst Label = styled.label`\n  width: 100%;\n  font-weight: 500;\n\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\nconst Title = styled.p`\n  width: 100%;\n  /* text-align:center; */\n  margin-bottom: 5px;\n  margin-left: 205px;\n  color: #ff188c;\n`;\nconst Input = styled.input`\n  width: 30%;\n`;\nexport { FilterBlock, Label, Title, Input };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FilterBlock, Label, Title, Input } from './StyledComponents';\n\nexport default function FilterContacts({ value, OnInputFilter }) {\n  return (\n    <FilterBlock>\n      <Label>\n        <Title>Find Contacts by name</Title>\n        <Input\n          type=\"text\"\n          value={value}\n          onChange={event => OnInputFilter(event.target.value)}\n        />\n      </Label>\n    </FilterBlock>\n  );\n}\n\nFilterContacts.propTypes = {\n  OnInputFilter: PropTypes.func,\n  value: PropTypes.string,\n};\n","import { useState, useEffect } from 'react';\nimport ContactsForm from './ContactsForm';\nimport ContactsList from './ContactsList';\nimport SectionBlock from './Section';\nimport ContactsFilter from './ContactsFilter';\n\nimport { v4 as uuidv4 } from 'uuid';\n\nexport default function App() {\n   const [contacts, setContacts] = useState( JSON.parse(window.localStorage.getItem('contacts')) ?? '',);\n  const [nameFilter, setNameFilter] = useState('');\n\n useEffect(() => {\n    localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n\nconst isAdded = name => contacts.map(contact => contact.name).includes(name);\n\n  const addContact = (name, number) => {\n    if (isAdded(name)) {\n      return alert(`${name} is in the list of your contacts`);\n    } else {\n      setContacts(contacts => [\n        ...contacts,\n        { id: uuidv4(), name: name, number: number },\n      ]);\n    }\n  };\n\n  const filterContactList = () => {\n    return contacts.filter(item =>\n      item.name.toLowerCase().includes(nameFilter.toLowerCase()),\n    );\n  };\n\n  const deleteContact = id => {\n    setContacts(prevState => prevState.filter(e => e.id !== id));\n  };\n\n  const contactsFilterInput = inputValue => {\n    setNameFilter(inputValue);\n  };\n\n  const visibleContacts = filterContactList();\n\n  return (\n      <>\n        <SectionBlock title=\"Phonebook\">\n          <ContactsForm addContact={addContact} />\n          <ContactsFilter\n            value={nameFilter}\n            OnInputFilter={contactsFilterInput}\n          />\n          <ContactsList\n            items={visibleContacts}\n            onDeleteContact={deleteContact}\n          />\n        </SectionBlock>\n      </>\n  );\n   \n  }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}